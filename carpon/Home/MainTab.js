import React, {Component} from 'react';import {Alert, Dimensions, Platform, SafeAreaView, Text, TouchableOpacity, View, AppState} from 'react-native';import ReviewsTopScreen from './Review/container/ReviewsTopScreen';import MyCarScreen from "./MyCar/container/MyCarScreen";import CarLifeScoreScreen from "./Score/container/ScoreScreen";import OtherCarScreen from "./OtherCarScreen";import {screen} from "../../navigation";import {HeaderHome, MenuBar} from '../../components'import {connect} from 'react-redux';import {SvgImage, SvgViews} from '../../components/Common/SvgImage';import {deviceService, myCarService} from "../../carpon/services";import firebase from '@react-native-firebase/app';import '@react-native-firebase/messaging';import SideMenu from 'react-native-side-menu';import {SceneMap, TabView} from 'react-native-tab-view';import {$$_CARPON_CLEAR} from "../../carpon/services/Storage";import Overlay from 'react-native-modal-overlay';import ImageLoader from "../../components/ImageLoader";import {images} from "../../assets/index";import ButtonText from "../../components/ButtonText";import {getPastReview} from "../Home/Review/action/ReviewAction";import {getAllNotification} from "../common/actions/notification";import {navigationService} from "../services/index";import {loadUser, switchCar} from "../FirstLoginPhase/actions/registration";import JapaneseText from "../../components/JapaneseText";import {addTrackerEvent, identifyUser, viewPage} from "../Tracker";import {changeScreenNumber, changeTab} from "../common/actions/metadata";import PostList from "./SNS/container/PostList";import messaging from "@react-native-firebase/messaging";import {Notification} from "@react-native-karte/notification";import notifee, {EventType} from "@notifee/react-native";import store from "../store";import {setKeyword, setPost} from "./SNS/action/SNSAction";import {SNSNavTab} from "./SNS/SNSContext";@screen('MainTab', ({navigation}) => {        const {params = {}} = navigation.state;        return {            header: <HeaderHome onPressLeft={() => params.navigateLeft()}/>        }    })@connect(state => ({    carInRegistration: state.registration.carProfile ? state.registration.carProfile.profile : {},    myProfile: state.registration.userProfile ? state.registration.userProfile.myProfile : {},    carInfo: state.getCar.myCarInformation ? state.getCar.myCarInformation : {},    carProfile: state.registration.carProfile,    sizeMenu: state.sizeMenu,    review: state.review,    screenNumber: state.metadata.screenNumber,    currentScreen: state.metadata.currentScreen ? state.metadata.currentScreen : null,}), dispatch => ({    clear: () => dispatch({        type: $$_CARPON_CLEAR    }),    setOpenState: state => {        dispatch({            type: 'SIDE_MENU_STATE',            state        })    },    getPastReview: (id) => dispatch(getPastReview(id)),    getAllNotification: () => dispatch(getAllNotification()),    switchCarByQR: () => dispatch(switchCar()),    loadUser: () => dispatch(loadUser()),    changeScreenNumber: (number) => dispatch(changeScreenNumber(number)),    changeTab: (tab, rank) => dispatch(changeTab(tab, rank)),    setPost: (id) => dispatch(setPost(id)),    setKeyword: (keyword) => dispatch(setKeyword(keyword)),}))@SNSNavTab()export class MainTab extends Component {    constructor(props) {        super(props);        this.state = {            modalReviewVisible: false,            modalInsuranceVisible: (props.myProfile.car_id && props.myProfile.has_car_insurance === null),            index: 0,            routes: [                {                    title: 'マイカー',                    key: 'myCar',                    icon: (disable) => {                        return (<SvgImage source={() => SvgViews.IconCar({fill: disable ? '#666666' : '#fff'})}/>)                    },                },                {                    title: 'スコアアップ',                    key: 'score',                    icon: (disable) => {                        return (<SvgImage source={() => SvgViews.TabCarLife({disable})}/>)                    },                },                {                    title: 'フォト日記',                    key: 'news',                    icon: () => {                        return (<SvgImage source={SvgViews.TabNews}/>)                    },                },                {                    title: 'レビュー',                    key: 'review',                    icon: (disable) => {                        return (<SvgImage source={() => SvgViews.TabReview({disable})}/>)                    },                },                {                    title: 'メニュー',                    key: 'others',                    icon: () => {                        return (<SvgImage source={SvgViews.TabOthers}/>)                    },                }            ],        };        // this.scene = SceneMap({        //     'news': PostList,        //     'review': () => <ReviewsTopScreen navigation={this.props.navigation}/>,        //     'myCar': () => <MyCarScreen navigation={this.props.navigation}/>,        //     'score': () => <CarLifeScoreScreen navigation={this.props.navigation}/>,        //     'others': () => <OtherCarScreen navigation={this.props.navigation}        //                                     onTabChange={(index) => this.handleChangeTab(index)}/>        // })    }    renderScene = ({route}) => {        switch (route.key) {            case 'news':                return <PostList/>;            case 'review':                return <ReviewsTopScreen navigation={this.props.navigation}/>;            case 'myCar':                return <MyCarScreen navigation={this.props.navigation}/>;            case 'score':                return <CarLifeScoreScreen navigation={this.props.navigation}/>;            case 'others':                return <OtherCarScreen navigation={this.props.navigation}                                       onTabChange={(index) => this.handleChangeTab(index)}/>;            default:                return null;        }    };    componentWillReceiveProps(nextProps) {        nextProps.screenNumber !== this.state.index && this.setState({index: nextProps.screenNumber});    }    componentWillMount() {        this.props.loadUser();        this.props.getPastReview(this.props.myProfile.id);        this.props.getAllNotification();        const previousState = this.props.navigation.state.params;        if (this.props.navigation.getParam('tabNumber') && this.props.navigation.getParam('ScoreTab')) {            this.props.changeTab(parseInt(this.props.navigation.getParam('ScoreTab')));        }        if (previousState && previousState.nextScreen && previousState.nextScreen !== 'MainTab') {            setTimeout(() => {                navigationService.navigate(previousState.nextScreen, previousState);            }, 500)        }        const tabNumber = this.props.navigation.getParam('tabNumber') ? parseInt(this.props.navigation.getParam('tabNumber')) : 0;        if (tabNumber) {            this.handleChangeTab(tabNumber);            tabNumber === 2 && this.handleChangePostTab();        }    }    handleShowModalUpdateMiniCar() {        let CarId = this.props.carInRegistration.id;        let grade_code = this.props.carInRegistration.grade_code;        if (CarId && !grade_code) {            Alert.alert(                '車両情報確認完了',                'マイカーの詳細情報を入力し、登録を完了させてください。',                [                    {                        text: 'OK',                        onPress: () => {                            navigationService.clear('UpdateCarPending');                        }                    }                ]);        }    }    handleCarNotification(data) {        let hoyu_id = (this.props.carInfo.hoyu_id) ? this.props.carInfo.hoyu_id : false;        let userConfirmed = store.getState().registration.userProfile.confirmed;        const params = JSON.parse(data.data.params);        if (userConfirmed && params && params.status) {            if (params.status === 'SUCCESS') {                if (params.isHasProfile && !hoyu_id) {                    Alert.alert(                        '車両情報確認完了',                        'マイカーの詳細情報を入力し、登録を完了させてください。',                        [                            {                                text: 'OK',                                onPress: () => {                                    navigationService.clear('UpdateCarPending');                                }                            }                        ]);                }            } else {                Alert.alert('軽自動車登録に失敗しました')            }        }    }    async onDisplayNotification(remoteMessage) {        const channelId = await notifee.createChannel({            id: 'Carpon-channel',            name: 'Carpon-channel',        });        await notifee.displayNotification({            title: remoteMessage.data.title,            body: remoteMessage.data.content,            android: {                channelId,                smallIcon: '@mipmap/ic_notify'            },            data: {                params: remoteMessage.data.params,                destination: remoteMessage.data.destination            }        });    }    handleNavigationBy(NotificationData) {        switch (NotificationData.data.destination) {            case 'MyCar' :                navigationService.popToTop();                return this.handleChangeTab(0);            case 'Score' :                navigationService.popToTop();                return this.handleChangeTab(1);            case 'News' :                navigationService.popToTop();                return this.handleChangeTab(2);            case 'Review' :                navigationService.popToTop();                return this.handleChangeTab(3);            case 'UpdateLookupMiniCar' :                return NotificationData.status === 'CONFIRM' && this.handleUpdateSmallCar();            case 'LookupMiniCar':            case 'LookupNormalCar':                return this.handleCarNotification(NotificationData);            case 'VerificationOut':                return this.handleRemoveCar();            case 'carpon.MyPageScreen':                return navigationService.navigate('Notification');            case 'DetailNotification':                return navigationService.navigate('DetailNotification', {...JSON.parse(NotificationData.data.params)});            case 'CommentPost':                return this.handleCommentPostNotification(NotificationData);            case 'NewPost':                return this.handleNewPostNotification(NotificationData);            default:                return navigationService.push(NotificationData.data.destination, {...JSON.parse(NotificationData.data.params)});        }    }    handleNewPostNotification(NotificationData) {        const post = JSON.parse(NotificationData.data.params);        const currentScreen = this.props.currentScreen;        currentScreen === 'CommentPost' ? this.props.setPost(post.postId) :            navigationService.navigate('CommentPost', {...JSON.parse(NotificationData.data.params)});    }    handleCommentPostNotification(NotificationData) {        const post = JSON.parse(NotificationData.data.params);        const currentScreen = this.props.currentScreen;        currentScreen === 'CommentPost' ? this.props.setPost(post.postId) :            navigationService.navigate('CommentPost', {...JSON.parse(NotificationData.data.params)});    }    handleKarteNotification(remoteMessage) {        const notification = Notification.create(remoteMessage);        !!notification && notification.handle();        !!notification && notification.track();    }    handleNotification() {        messaging().onMessage(remoteMessage => {            console.log(remoteMessage, 'remote');            this.props.getAllNotification();            !!remoteMessage && this.onDisplayNotification(remoteMessage);        });        messaging()            .getInitialNotification()            .then(remoteMessage => {                !!remoteMessage && this.handleNavigationBy(remoteMessage);                !!remoteMessage && this.handleKarteNotification(remoteMessage)            });        messaging().onNotificationOpenedApp(remoteMessage => {            if ((Platform.OS === 'ios' && AppState.currentState === 'background') || (Platform.OS === 'android' && AppState.currentState === 'active')) {                !!remoteMessage && this.handleNavigationBy(remoteMessage);                !!remoteMessage && this.handleKarteNotification(remoteMessage)            }        });    }    handleRemoveCar() {        store.dispatch({type: 'GET_CAR'});        navigationService.clear('MainTab', {tabNumber: 2});        Alert.alert(            '車検証切れ',            '車検証情報に変更がありました',            [                {                    text: 'OK'                }            ],            {cancelable: false}        )    }    handleUpdateSmallCar() {        Alert.alert(            '車検証更新',            '車の所有者が変わっている可能性があります。このまま登録してよろしいでしょうか？',            [                {                    text: 'はい', onPress: () => {                        myCarService.confirmCarLookup(true).then(() => {                            store.dispatch({type: 'GET_CAR'})                        });                    }                },                {                    text: 'いいえ', onPress: () => {                        myCarService.confirmCarLookup(false);                    }                },            ],            {cancelable: false}        )    }    requestNotificationPermission() {        messaging().hasPermission()            .then(enabled => {                if (enabled === 1) {                    firebase.messaging().getToken().then(fcmToken => {                        deviceService.postToken(fcmToken, Platform.OS)                    });                } else {                    firebase.messaging().requestPermission()                        .then(() => {                            firebase.messaging().getToken().then(fcmToken => {                                deviceService.postToken(fcmToken, Platform.OS)                            });                        })                        .catch(error => {                            console.log(error);                        });                }            });    }    handleOnPressNotification() {        notifee.onForegroundEvent(({type, detail}) => {            let notification = {...detail.notification, destination: detail.notification.data.destination};            switch (type) {                case EventType.DISMISSED:                    break;                case EventType.PRESS:                    return this.handleNavigationBy(notification);            }        })    };    componentDidMount() {        this.handleOnPressNotification();        this.handleLogView(this.state.index);        this.handleShowModalUpdateMiniCar();        if (this.props.review.pastReview.length > 0) {            this.setState({modalReviewVisible: false})        }        this.requestNotificationPermission();        this.handleNotification();        this.props.navigation.setParams({            navigateLeft: () => this.handleChangeTab(1)        });        this.onTokenRefreshListener = firebase.messaging().onTokenRefresh(fcmToken => {            deviceService.postToken(fcmToken, Platform.OS)        });        if (this.props.carInfo.length > 0 && this.props.myProfile.has_car_insurance === null && this.state.index === 0 && this.state.modalInsuranceVisible) {            viewPage('insurance_rough_start', '任意保険簡易見積_開始')        }    }    handleChangePostTab() {        const timeout = Platform.OS === 'ios' ? 500 : 2000;        const [{}, {focusTab}] = this.props.tabNavigator;        const keyword = this.props.navigation.getParam('keyword');        const postTab = this.props.navigation.getParam('postTab') ? parseInt(this.props.navigation.getParam('postTab')) : 0;        setTimeout(() => {            focusTab(postTab);            keyword && this.props.setKeyword(keyword);        }, timeout)    }    componentWillUnmount() {        this.onTokenRefreshListener();    }    handleLogView(index) {        switch (index) {            case 0:                const profile = this.props.myProfile;                const rank = {                    1: 'regular',                    2: 'gold',                    3: 'platinum',                };                viewPage('top', 'トップ');                identifyUser({                    user_id: profile.id,                    user_rank: rank[profile.rank],                    user_score: profile.total_score                });                break;            case 1:                viewPage('score', 'スコア');                break;            case 2:                // viewPage('news', 'ニュース');                break;            case 3:                const {review} = this.props;                !review.reviewAppStatus && viewPage('review', 'レビュー');                break;            case 4:                viewPage('menu', 'メニュー');                break;        }    }    handleColorText(status, index) {        if (!status || index === 2 || index === 4) {            return '#FFF'        } else {            return '#666'        }    }    // renderScene() {    //     return this.scene;    // }    _renderTabBar = props => {        return (            <View style={{                flexDirection: 'row',                height: 60,                justifyContent: 'space-between'            }}>                {props.navigationState.routes.map((route, i) => {                    let backgroundColor = this.state.index === i ? '#4B9FA5' : '#212121';                    let disable = false;                    if (!this.props.carInfo || !this.props.carInfo.id) {                        disable = true;                    }                    return (                        <TouchableOpacity                            activeOpacity={1}                            key={i}                            style={{                                flex: 1,                                justifyContent: 'center',                                textAlign: 'center',                                backgroundColor                            }}                            onPress={() => this.handleChangeTab(i)}                        >                            <View style={{                                height: 30,                                justifyContent: 'center',                                alignItems: 'center',                            }}>                                {route.icon(disable)}                            </View>                            <Text style={{                                fontSize: 8,                                color: this.handleColorText(disable, i),                                textAlign: 'center',                                fontWeight: 'bold'                            }}>{route.title}</Text>                        </TouchableOpacity>                    );                })}            </View>        );    };    handleReview() {        this.setState({index: 3});        if (this.props.review.pastReview.length === 0 && this.props.carInfo.length > 0) {            this.checkNickName();        }    }    handleChangeTab(index) {        const carInfo = this.props.carInfo;        if (carInfo.length > 0) {            if (index !== this.state.index) {                this.handleLogView(index);            }            this.setState({index});            this.props.changeScreenNumber(index);            if (index === 3) {                if (this.props.review.pastReview.length === 0 && this.props.carInfo.length > 0) {                    this.checkNickName();                }            }        } else {            (index === 0 || index === 1 || index === 3) ? this.handleShowAlert() : this.setState({index})        }    }    handleShowAlert() {        const waitingCar = this.props.carProfile.waitingCarHOUY || this.props.carProfile.waitingCarCertification;        if (waitingCar) {            Alert.alert(                'ご利用いただけません',                '車両登録待ちのため、この機能はご利用いただけません。登録が終わり次第メッセージでご案内します。今しばらくお待ちください。',                [{text: 'OK'}])        } else {            Alert.alert(                'ご利用いただけません',                '先に車両を登録してください',                [                    {                        text: '後で',                        onPress: () => {                            this.setState({index: 2})                        }                    },                    {                        text: '登録する',                        onPress: () => {                            this.props.switchCarByQR();                            navigationService.navigate('CarTypeSwitch')                        }                    }                ]            )        }    }    render() {        const {sizeMenu} = this.props;        return (            <SideMenu menu={<MenuBar onTabChange={(index) => this.setState({index})}/>}                      menuPosition={'right'}                      isOpen={sizeMenu}                      onChange={isOpen => {                          this.props.setOpenState(isOpen)                      }}            >                <SafeAreaView style={{flex: 1, backgroundColor: '#212121'}}>                    <TabView                        navigationState={this.state}                        renderScene={this.renderScene}                        tabBarPosition={'bottom'}                        swipeEnabled={this.props.carInfo.length > 0}                        onIndexChange={index => this.setState({index})}                        initialLayout={{                            height: Dimensions.get('window').height,                            width: Dimensions.get('window').width                        }}                        renderTabBar={this._renderTabBar}                        lazy={true}                    />                    <Overlay                        visible={(this.props.carInfo.length === 0 || this.props.myProfile.has_car_insurance !== null || this.state.index !== 0) ? false : this.state.modalInsuranceVisible}                        onClose={() => this.setState({modalInsuranceVisible: false})}                        childrenWrapperStyle={{borderRadius: 20}} closeOnTouchOutside={true}>                        <View>                            <Text style={{                                color: '#666666',                                fontSize: 15,                                textAlign: 'center',                                fontWeight: 'bold'                            }}>{'<' + 'Score Up Mission' + '>'}</Text>                            <Text style={{                                color: '#4B9FA5',                                fontSize: 19,                                fontWeight: 'bold',                                textAlign: 'center',                                marginVertical: 10                            }}>質問に答えてスコアアップ！</Text>                            <View>                                <ImageLoader                                    style={{width: '100%', height: 100}}                                    source={images.insuranceSurvey}                                />                            </View>                            <JapaneseText style={{color: 'black', marginVertical: 10, fontSize: 13, lineHeight: 18}}                                          value={'任意保険に関する質問に答えて“Car Life Score”をアップ！カーポンの提案精度が高まり、あなたのカーライフがもっとお得に！'}/>                            <ButtonText title={'OK'} onPress={() => {                                this.setState({modalInsuranceVisible: false});                                navigationService.clear('RegisterInsurance')                            }}/>                        </View>                    </Overlay>                </SafeAreaView>            </SideMenu>        );    }    checkNickName() {        if (!this.props.myProfile.nick_name) {            return Alert.alert(                'ニックネームを登録しよう',                '実名でレビューを投稿する場合は「登録しない」を選択し、お進みください。',                [                    {                        text: '登録しない'                    },                    {                        text: '登録する', onPress: () => {                            navigationService.navigate('UpdateNickname', {fromReview: true})                        }                    }                ],                {cancelable: false}            );        }    }}